# УСЛОВИЯ ДОМАШЕК
#
# 1-hw Умножение двух чисел
# Напишите программу, которая запрашивает у пользователя два числа.
# Программа должна умножить эти два числа и вывести результат.
# Пример ввода и вывода в терминале:
#
# Введите первое число: 4
#
# Введите второе число: 2.5
#
# Результат умножения: 10.0
#
# 2-hw Вычисление площади кв
# Напишите программу, которая запрашивает у пользователя длину и ширину прямоугольника.
# Программа должна вычислить площадь прямоугольника и вывести результат на экран.
# Пример ввода и вывода в терминале:
#
# Введите длину прямоугольника: 5
#
# Введите ширину прямоугольника: 3
#
# Площадь прямоугольника: 15
#
# 3-hw Выбор макс их двух чисел
#
# Напишите программу, которая принимает два числа и выводит большее из них.
#
# Пример в терминале:
#
# Введите первое число: 7
#
# Введите второе число: 3
#
# Большее число: 7
#
# 4-hw Опрежедение сезона по номеру месяца
#
# Напишите программу, которая принимает номер месяца и выводит соответствующий сезон (зима, весна, лето или осень).
#
# Пример в терминале:
#
# Введите номер месяца (1-12): 4
#
# Весна
#
# 5-hw Опрежеление возраста по году рождения
#
# Напишите программу, которая принимает год рождения и выводит возраст пользователя.
#
# Пример в терминале:
#
# Введите год рождения: 2000
#
# Ваш возраст: 24
#
# 6-hw Калькулятор с циклом while
#
# Условия:
# Программа должна запрашивать два числа у пользователя.
# Программа должна запрашивать оператор: +, -, *, /.
# Программа должна выводить результат операции.
# Если введен некорректный оператор, программа должна вывести сообщение об ошибке.
# Если пользователь делит на ноль, программа должна предупредить об ошибке.
# Цикл продолжается до тех пор, пока пользователь не введет команду выхода, например, Выход.
# Подсказка:
# Для выхода из программы пользователь может ввести слово "Выход" вместо оператора.
# Пример выполнения программы:
# Введите первое число: 10
#
# Введите второе число: 5
#
# Введите оператор (+, -, *, /): +
#
# Результат: 15
#
# Введите первое число: 8
#
# Введите второе число: 0
#
# Введите оператор (+, -, *, /): /
#
# Ошибка: деление на ноль.
#
# Введите первое число: Выход
#
# Программа завершена.
#
#
# 7-hw Угадай число
#
# Условия:
# Программа загадывает случайное число в диапазоне от 1 до 100(Вы сами загадываете число и пишите его в переменную).
# Пользователь вводит свое предположение.
# Программа сообщает пользователю, угадал ли он число, или число больше/меньше загаданного.
# Когда число угадано, программа должна вывести поздравительное сообщение.
# И все это должно работать на цикле while!
# Пример выполнения программы:
# Программа загадала число.
#
# Угадайте его!
#
# Ваше предположение: 50
#
# Меньше!
#
# Ваше предположение: 25
#
# Больше!
#
# Ваше предположение: 30
#
# Поздравляем!
#
# Вы угадали число.
#
# 8-hw Таблица
#
# Создайте программу, которая будет выводить таблицу умножения для любого числа, введенного пользователем.  Для реализации используйте цикл while.
#
# Условия:
# Программа запрашивает у пользователя число.
# Программа выводит таблицу умножения для этого числа (от 1 до 10).
# После вывода таблицы программа снова запрашивает число.
# Пример выполнения программы:
# Введите число: 7
#
# 7 * 1 = 7
#
# 7 * 2 = 14
#
# 7 * 3 = 21
#
# 7 * 4 = 28
#
# 7 * 5 = 35
#
# 7 * 6 = 42
#
# 7 * 7 = 49
#
# 7 * 8 = 56
#
# 7 * 9 = 63
#
# 7 * 10 = 70
#
#
# 9-hw Оценки учеников
# Описание задачи:
# Создайте программу для хранения и вывода оценок учеников. У каждого ученика должно быть имя и одна оценка. Программа должна запрашивать у пользователя имя ученика и оценку, затем сохранять их в словаре. В конце программа должна вывести все имена учеников и их оценки.
#
# Требования:
#
# Создайте пустой словарь для хранения учеников и их оценок.
# Запросите у пользователя имя и оценку ученика (например, {"Иван": 5, "Мария": 4, "Пётр": 3}).
# Повторяйте ввод данных несколько раз, например, пока пользователь не введёт "стоп".
# Выведите всех учеников и их оценки по завершении.
# Пример интерфейса:
#
# Введите имя ученика: Иван
#
# Введите оценку: 5
#
# Введите имя ученика: Мария
#
# Введите оценку: 4
#
# Введите имя ученика (или "стоп" для завершения): стоп
#
# Результаты:
#
# Иван: 5
#
# Мария: 4
#
# 10-hw цены на продукты
#
# Описание задачи:
# Создайте словарь с несколькими продуктами и их ценами. Программа должна запрашивать у пользователя название продукта и выводить его цену.
#
# Требования:
#
# Заранее создайте словарь, где ключами будут названия продуктов, а значениями — их цены (например, {"яблоко": 50, "банан": 30, "молоко": 80}).
# Запросите у пользователя название продукта и выведите его цену.
# Если введённого продукта нет в словаре, выведите сообщение, что продукта нет в наличии.
# Пример интерфейса:
#
# Введите название продукта: банан
#
# Цена: 30
#
# 11-hw Курс обмена валют

# Описание задачи:
# Создайте словарь с курсами валют, где ключом будет название валюты (например, "USD", "EUR"), а значением — курс к рублю. Программа должна запрашивать у пользователя валюту и количество, а затем выводить результат конвертации.
#
# Требования:
#
# Заранее создайте словарь, например: {"USD": 89, "EUR": 88, "GBP": 101}.
# Запросите у пользователя код валюты и количество, которое нужно конвертировать.
# Вычислите и выведите результат, умножив количество на курс валюты.
# Если введённой валюты нет в словаре, выведите сообщение об отсутствии данных.
# Пример интерфейса:
#
# Введите код валюты: USD
#
# Введите количество: 10
#
# Результат: 890 сом

# 12-hw Номерной знак

# Допустим, в нашей стране был старый формат номерных знаков автомобилей
# который состоит из четырех цифр одна буква до цифр,
# и 1 или 2 буквы после цифр, например I0075K или B4785AA.
# После того как все возможные номера были использованы,
# формат был изменен на три цифры, предшествующие трем буквам например 826AEF
# Напишите программу, которая будет:
# Запрашивать имя
# Запрашивать фамилию
# Запрашивающую у пользователя номерной знак
# Проверять старый или новый образец
# На выходе программа должна сообщить какого типа номер владельца
# и используя методы форматирования вывести сообщение:
# «Имя Фамилия, номерной знак …….., у Вас старый/новый образец.

# 13-hw  Работа с аргс и кваргс

# Напишите функцию calculate, которая принимает неограниченное количество чисел через *args и дополнительные операции через **kwargs. Функция должна возвращать результат выполнения всех указанных операций.
#
# Описание работы функции:
#
# Если передан ключ operation="sum", то функция должна возвращать сумму всех чисел из *args.
# Если передан ключ operation="multiply", то функция должна возвращать произведение всех чисел из *args.
# Если ключ operation не указан, возвращать "Операция не указана".
# Пример вызова:
#
# print(calculate(1, 2, 3, operation="sum")) # Вывод: 6
#
# print(calculate(1, 2, 3, 4, operation="multiply")) # Вывод: 24
#
# print(calculate(1, 2, 3)) # Вывод: "Операция не указана"

# 14 рабоат с лямбда цункциями

# Напишите программу, которая принимает список чисел и выполняет заданную операцию (например, возведение в квадрат или проверку на четность) с использованием лямбда-функции.
#
# Описание работы:
#
# Напишите функцию apply_operation(numbers, operation), которая принимает:
# numbers: список чисел.
# operation: лямбда-функцию, которая выполняет нужную операцию над каждым числом.
# Верните новый список, в котором к каждому числу из numbers применена лямбда-функция.
# Пример использования:
#
# numbers = [1, 2, 3, 4, 5]
#
# 15 Возведение в квадрат
#
# squared = apply_operation(numbers, lambda x: x ** 2)
#
# print(squared) # Вывод: [1, 4, 9, 16, 25]
#
# # Проверка на четность
#
# is_even = apply_operation(numbers, lambda x: x % 2 == 0)
#
# print(is_even) # Вывод: [False, True, False, True, False]

# 16-hw Использование map  с лямбда функциями

# Условие:
# У вас есть список строк:
# words = ["python", "lambda", "map", "function", "programming"]
#
# Напишите программу, которая:
# Создаёт новый список, где каждая строка преобразована в заглавные буквы.
# Создаёт ещё один список, где подсчитывается количество символов в каждой строке.
# Пример вывода:
# words = ["python", "lambda", "map", "function", "programming"] # Список в заглавных буквах
#
# uppercase_words = ... # Напишите ваш код
#
# print(uppercase_words) # Вывод: ['PYTHON', 'LAMBDA', 'MAP', 'FUNCTION', 'PROGRAMMING']
#
# # Список с количеством символов
#
# word_lengths = ... # Напишите ваш код
#
# print(word_lengths) # Вывод: [6, 6, 3, 8, 11]
#
# Подсказки:
# Используйте map и лямбда-функции.
# Для преобразования строки в заглавные буквы используйте метод .upper().
# Для подсчёта символов в строке используйте функцию len().


# 17-hw использование @classmethod

# Создайте класс Account с атрибутами:

# account_type — тип аккаунта.
# balance — баланс.
# Добавьте методы:
#
# Конструктор класса from_deposit, который создает аккаунт с указанным депозитом и типом.
# Обычный метод deposit для увеличения баланса.
# Класс-метод change_account_type, который меняет тип аккаунта.
# Пример использования:



# account = Account.from_deposit(100, "Savings")
# account.deposit(50)
# print(account.balance)  # Ожидается: 150

# Account.change_account_type(account, "Current")
# print(account.account_type)  # Ожидается: "Current"

# 18-hw Абастрактный класс с использованием @staticmethod

# Создайте абстрактный класс Converter с абстрактным статическим методом convert. Реализуйте два подкласса:

# CelsiusToFahrenheitConverter, который переводит температуру из градусов Цельсия в Фаренгейты.
# KilometersToMilesConverter, который переводит расстояние из километров в мили.
# Пример использования:

# print(CelsiusToFahrenheitConverter.convert(25))  # Ожидается: 77.0
# print(KilometersToMilesConverter.convert(10))  # Ожидается: 6.2

# 19-hw класс и статические методы

# Создайте класс Student, который будет отслеживать общее количество студентов. У класса должны быть:

# Атрибут total_students, который увеличивается при создании каждого объекта.
# Статический метод get_total_students, который возвращает текущее количество студентов.
# Пример использования:



# s1 = Student("Alice")
# s2 = Student("Bob")

# print(Student.get_total_students())  # Ожидается: 2


# 20-hw создание абстрактного класса

# Создайте абстрактный класс Shape с методом get_area, который будет возвращать площадь фигуры. Реализуйте два подкласса:

# Circle (круг), который принимает радиус.
# Rectangle (прямоугольник), который принимает длину и ширину.
# В каждом классе реализуйте метод get_area, который возвращает площадь соответствующей фигуры.

# Пример использования:


# circle = Circle(radius=5)
# rectangle = Rectangle(length=4, width=3)

# print(circle.get_area())  # Ожидается: 78.5
# print(rectangle.get_area())  # Ожидается: 12


# 21 hw перегрузка операторов + и *

# Создайте класс Vector для работы с векторами на плоскости. У него должны быть:

# Поля: x, y.
# Метод __add__ для сложения двух векторов.
# Метод __mul__ для умножения вектора на число.
# Пример:

# v1 = Vector(1, 2) v2 = Vector(3, 4) print(v1 + v2) # Vector(4, 6) print(v1 * 3) # Vector(3, 6)